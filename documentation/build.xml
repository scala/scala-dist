<?xml version="1.0" encoding="UTF-8"?>

<project name="scala-documentation" basedir="." default="build">

  <description>
    I am SABBUS for ${ant.project.name}, the build system for the Scala documentation.
    Please check the 'docs/README' file for more information about me.
  </description>

  <echo>Running Sabbus for ${ant.project.name}</echo>

<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property environment="env"/>

  <property name="bin.dir"            value="${basedir}/bin"/>
  <property name="src.dir"            value="${basedir}/src"/>
  <property name="src.reference.dir"  value="${basedir}/src/reference"/>
  <property name="src.tutorial.dir"   value="${basedir}/src/tutorial"/>
  <property name="lib.dir"            value="${basedir}/lib"/>
  <property name="build.dir"          value="${basedir}/build"/>
  <property name="dist.dir"           value="${basedir}/dists"/>
  <property name="dist.latest.dir"    value="${dist.dir}/latest"/>

  <!-- User properties -->
  <property file="${basedir}/build.properties"/>

  <!-- Location of pre-compiled libraries properties -->
  <property name="scala.starr.dir"    value="${user.home}/scala"/>
  <property name="number.file"        value="${scala.starr.dir}/build.number"/>
  <property name="scala.lib.dir"      value="${scala.starr.dir}/lib"/>  
  <property name="lib.starr.jar"      value="${scala.lib.dir}/scala-library.jar"/>
  <property name="comp.starr.jar"     value="${scala.lib.dir}/scala-compiler.jar"/>
  <property name="ant-contrib.jar"    value="${scala.lib.dir}/ant/ant-contrib.jar"/>

  <property name="version.separator"  value="."/>


<!-- ===========================================================================
INIT
============================================================================ -->

  <target name="ant-init">
  <!-- Making sure lib/ contains everything that is needed -->
    <fail message="A required library is missing in '${scala.lib.dir}/'. The README file describes what should be there.">
      <condition><not><and>
        <available file="${lib.starr.jar}"/>
        <available file="${comp.starr.jar}"/>
        <available file="${ant-contrib.jar}"/>
      </and></not></condition>
    </fail>
  <!-- Setting-up Ant contrib tasks -->
    <taskdef
      resource="net/sf/antcontrib/antlib.xml"
      classpath="${ant-contrib.jar}"
    />
  </target>

  <target name="init" depends="ant-init">
    <tstamp prefix="time">
      <format
        property="human"
        pattern="EEEE, d MMMM yyyy, HH:mm:ss (zz)"
      />
      <format
        property="short"
        pattern="yyyyMMdd-HHmmss"
      />
    </tstamp>
    <!-- Checking resource dependencies -->
    <fail message="External file ${number.file} is missing">
      <condition><not><and>
        <available file="${number.file}" type="file"/>
      </and></not></condition>
    </fail>
    <!-- Finding out SVN revision -->
    <exec
      executable="svn" vmlauncher="no"
      errorproperty="svn.err" outputproperty="svn.out">
      <arg line=" info ${basedir}"/>
    </exec>
    <propertyregex
      property="svn.number" input="${svn.out}" select="\1"
      regexp="Revision: ([0-9]+)"
      defaultValue="x"
    />
  </target>

  <target name="build.init" depends="init">
    <!-- Finding out what system architecture is being used -->
    <condition property="os.win">
      <os family="windows"/>
    </condition>
    <if><isset property="os.win"/>
      <then>
        <exec executable="cygpath"
              vmlauncher="no"
              errorproperty="cygpath.err"
              outputproperty="cygpath.out">
          <arg value="--windir"/>
        </exec>
        <condition property="os.cygwin">
          <equals arg1="${cygpath.err}" arg2=""/>
        </condition>
      </then>
    </if>
    <condition property="os.unix">
      <or>
        <os family="unix"/>
        <os family="mac"/>
        <isset property="os.cygwin"/>
      </or>
    </condition>
    <path id="scala.classpath">
      <pathelement location="${lib.starr.jar}"/>
      <pathelement location="${comp.starr.jar}"/>
    </path>
    <!-- Generating version number -->
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.separator}${svn.number}.${time.short}"
    />
    <echo level="verbose" message="version.number=${version.number}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/pt-BR"/>
    <uptodate
      property="uptodate.changes"
      srcfile="${src.reference.dir}/Changes.tex"
      targetfile="${build.dir}/Changes.pdf"
    />
    <uptodate
      property="uptodate.programming"
      targetfile="${build.dir}/ProgrammingInScala.pdf">
      <srcfiles
        dir="${src.reference.dir}"
        includes="RationalePart.tex,ExamplesPart.tex,ReferencePart.tex,SyntaxSummary.tex,ChangeLog.tex,ProgrammingInScala.tex"
      />
    </uptodate>
    <uptodate
      property="uptodate.byexample"
      targetfile="${build.dir}/ScalaByExample.pdf">
      <srcfiles
        dir="${src.reference.dir}"
        includes="ExamplesPart.tex,ScalaByExample.tex"
      />
    </uptodate>
    <uptodate
      property="uptodate.byexample.pt-BR"
      targetfile="${build.dir}/pt-BR/ScalaByExample.pdf">
      <srcfiles
        dir="${src.reference.dir}/pt-BR"
        includes="ExamplesPart.tex,ScalaByExample.tex"
      />
    </uptodate>
    <uptodate
      property="uptodate.rationale"
      srcfile="${src.reference.dir}/ScalaRationale.tex"
      targetfile="${build.dir}/ScalaRationale.pdf"
    />
    <uptodate
      property="uptodate.reference"
      targetfile="${build.dir}/ScalaReference.pdf">
      <srcfiles
        dir="${src.reference.dir}"
        includes="ReferencePart.tex,SyntaxSummary.tex,ChangeLog.tex,ScalaReference.tex"
      />
    </uptodate>
    <uptodate
      property="uptodate.tutorial"
      srcfile="${src.tutorial.dir}/ScalaTutorial.tex"
      targetfile="${build.dir}/ScalaTutorial.pdf"
    />
  </target>

<!-- ===========================================================================
BUILD
============================================================================ -->

  <target
    name="build.docu"
    depends="build.byexample,build.reference,build.tutorial,build.byexample.pt-BR"
  />

  <target
    name="build.others"
    depends="build.changes,build.programming,build.rationale"
  />

  <target
    name="build"
    depends="build.docu,build.others"
  />

  <macrodef name="latex">
    <attribute name="name"/>
    <attribute name="srcdir"/>
    <attribute name="locale" default="" />
    <sequential>
      <!-- we use 'exec' until a 'latexmk' task is available :-) --> 
      <exec dir="${build.dir}@{locale}" executable="latexmk" output="${build.dir}@{locale}/@{name}.log.ant">
        <env key="TEXINPUTS" value="${lib.dir}:@{srcdir}@{locale}:"/>
        <env key="BIBINPUTS" value="@{srcdir}:"/>
        <arg line="-g -pdf @{srcdir}@{locale}/@{name}"/>
      </exec>
      <exec dir="${build.dir}@{locale}" executable="pdf2ps"> <!-- pdftops -->
        <arg line="@{name}.pdf @{name}.ps"/>
      </exec>
      <gzip
        src="${build.dir}@{locale}/@{name}.ps"
        destfile="${build.dir}@{locale}/@{name}.ps.gz"
      />
    </sequential>
  </macrodef>

  <target name="build.changes" depends="build.init" unless="uptodate.changes">
    <latex name="Changes" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.programming" depends="build.init" unless="uptodate.programming">
    <latex name="ProgrammingInScala" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.byexample" depends="build.init" unless="uptodate.byexample">
    <latex name="ScalaByExample" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.byexample.pt-BR" depends="build.init" unless="uptodate.byexample.pt-BR">
    <latex name="ScalaByExample" srcdir="${src.reference.dir}" locale="/pt-BR" />
  </target>


  <target name="build.rationale" depends="build.init" unless="uptodate.rationale">
    <latex name="ScalaRationale" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.reference" depends="build.init" unless="uptodate.reference">
    <latex name="ScalaReference" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.tutorial" depends="build.init" unless="uptodate.tutorial">
    <latex name="ScalaTutorial" srcdir="${src.tutorial.dir}"/>
  </target>

<!-- ===========================================================================
DIST
============================================================================ -->

  <target name="dist.devel" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.separator}${svn.number}"
    />
    <runtarget target="dist"/>
  </target>

  <target name="dist.patch" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}.${version.suffix}"
    />
    <runtarget target="dist"/>
  </target>

  <target name="dist.minor" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}.${version.suffix}"
    />
    <runtarget target="dist"/>
  </target>

  <target name="dist" depends="clean.all,build">
    <property
      name="dist.current.dir"
      value="${dist.dir}/scala-documentation-${version.number}"
    />
    <copy todir="${dist.current.dir}">
      <fileset
        dir="${build.dir}"
        includes="**/*.pdf,**/*.ps.gz"
      />
    </copy>
    <if><isset property="os.win"/>
      <then>
        <copy todir="${dist.latest.dir}">
          <fileset dir="${dist.current.dir}"/>
        </copy>
      </then>
      <else>
        <symlink
          link="${dist.latest.dir}"
          resource="${dist.current.dir}"
          overwrite="yes"
          failonerror="no"
        />
      </else>
    </if>
  </target>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete
        dir="@{dir}"
        includeemptydirs="yes"
        quiet="yes"
        failonerror="no"
      />
    </sequential>
  </macrodef>

  <target
    name="clean"
    depends="clean.build"
    description="Deletes all generated build files."
  />

  <target name="clean.build">
    <remove dir="${build.dir}"/>
  </target>

  <target name="clean.all">
    <remove dir="${build.dir}"/>
    <remove dir="${dist.dir}"/>
  </target>

</project>
